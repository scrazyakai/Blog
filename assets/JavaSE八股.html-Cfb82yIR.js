import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as l}from"./app-B5LQUGUc.js";const t="/assets/img-5yXhoHGd.png",h={};function e(k,i){return l(),a("div",null,[...i[0]||(i[0]=[n('<h2 id="_1-java语言有哪些特性" tabindex="-1"><a class="header-anchor" href="#_1-java语言有哪些特性"><span>1. Java语言有哪些特性</span></a></h2><p>跨平台性、面向对象、平台无关性</p><h2 id="_2-jvm、jdk、jre有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-jvm、jdk、jre有什么区别"><span>2. JVM、JDK、JRE有什么区别</span></a></h2><p>JVM(Java虚拟机)：是实现跨平台的关键</p><p>JDK(Java开发工具包)：一整套完整的JavaJDK</p><p>JRE(Java运行环境)：包括Java运行需要的库以及JVM</p><figure><img src="'+t+`" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><h2 id="_3-说说什么是跨平台-原理是什么" tabindex="-1"><a class="header-anchor" href="#_3-说说什么是跨平台-原理是什么"><span>3. 说说什么是跨平台，原理是什么</span></a></h2><p>Java一次编译到处运行,原理是加入了一个中间件——JVM，JVM中.calss文件被翻译成各个系统的机器码</p><h2 id="_4-什么是字节码-使用字节码的好处是什么" tabindex="-1"><a class="header-anchor" href="#_4-什么是字节码-使用字节码的好处是什么"><span>4. 什么是字节码，使用字节码的好处是什么</span></a></h2><p>Java代码编译后产生的.class就是字节码，实现跨平台的特性</p><h2 id="_5-java有哪些数据类型" tabindex="-1"><a class="header-anchor" href="#_5-java有哪些数据类型"><span>5. Java有哪些数据类型</span></a></h2><p>暂时无法在飞书文档外展示此内容</p><h2 id="_6-自动类型转换和强制类型转换" tabindex="-1"><a class="header-anchor" href="#_6-自动类型转换和强制类型转换"><span>6. 自动类型转换和强制类型转换</span></a></h2><p>将小范围的值或变量赋给大范围的变量的时候会自动进行类型转换，反之需要强制类型转换</p><h2 id="_7-自动装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#_7-自动装箱和拆箱"><span>7. 自动装箱和拆箱</span></a></h2><p>装箱：将基本数据类型转化为包装数据类型</p><p>拆箱：包装数据类型会自动转化为基本数据类型</p><h2 id="_8-和-的区别" tabindex="-1"><a class="header-anchor" href="#_8-和-的区别"><span>8. &amp;和&amp;&amp;的区别</span></a></h2><p>&amp;是逻辑与操作</p><p>&amp;&amp;是短路逻辑与操作：左边表达式为false，右边的表达式会直接短路掉，不会再进行运算</p><p>|和||同理</p><h2 id="_9-break、continue、return" tabindex="-1"><a class="header-anchor" href="#_9-break、continue、return"><span>9. break、continue、return</span></a></h2><p>break:结束循环</p><p>continue:跳过此次循环，继续执行下次循环</p><p>return:程序返回，不再执行下面的代码</p><h2 id="_10-说说自增和自减" tabindex="-1"><a class="header-anchor" href="#_10-说说自增和自减"><span>10. 说说自增和自减</span></a></h2><p>符号在前是先加减再运算，符号在后是先计算再加减</p><h2 id="_11-float是怎么表示浮点数的" tabindex="-1"><a class="header-anchor" href="#_11-float是怎么表示浮点数的"><span>11. float是怎么表示浮点数的</span></a></h2><p>$$<br> float = (-1)^S \\times 1.M \\times 2^{E - 127}<br> $$</p><ul><li>S:符号位(1位)，0代表正数,1代表负数</li><li>存储指数位(8位)，使用<strong>移码</strong>表示（即实际指数 = E - 127，E = 实际指数+127）</li><li>M:尾数为(23位)</li></ul><blockquote><p><code>0.1 (十进制)</code> 转成二进制小数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>0.1 × 2 = 0.2 → 0 </span></span>
<span class="line"><span>0.2 × 2 = 0.4 → 0 </span></span>
<span class="line"><span>0.4 × 2 = 0.8 → 0 </span></span>
<span class="line"><span>0.8 × 2 = 1.6 → 1   （取 1，余 0.6） </span></span>
<span class="line"><span>0.6 × 2 = 1.2 → 1   （取 1，余 0.2） </span></span>
<span class="line"><span>0.2 × 2 = 0.4 → 0 </span></span>
<span class="line"><span>0.4 × 2 = 0.8 → 0 </span></span>
<span class="line"><span>0.8 × 2 = 1.6 → 1 </span></span>
<span class="line"><span>0.6 × 2 = 1.2 → 1 </span></span>
<span class="line"><span>…… 循环</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果： <code>0.1 (十进制)</code> = <strong><code>0.0001100110011001100110011...</code></strong> <strong>(二进制无限循环)</strong></p><hr><ol><li>科学计数法（标准化）</li></ol><p>把二进制移到 <code>1.xxxx</code> 形式：</p><p><code>0.0001100110011...</code> → <strong><code>1.1001100110011... × 2^-4</code>****(小数点向右移动四位)</strong></p><hr><ol><li>拆分 IEEE 754 结构</li></ol><ul><li><strong>符号位</strong> = <code>0</code>（正数）</li><li><strong>指数位</strong> = <code>-4 + 127 = 123</code> → 二进制：<code>01111011</code></li><li><strong>尾数位</strong> = 小数部分 <code>10011001100110011001100...</code> （只保留 23 位）</li></ul><p>所以最终存储的大概是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>0 | 01111011 | 10011001100110011001101</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><h2 id="_12-怎么保证数据准确性" tabindex="-1"><a class="header-anchor" href="#_12-怎么保证数据准确性"><span>12. 怎么保证数据准确性</span></a></h2><ol><li>避免使用浮点数，减少精度产生的影响，用BigDecimal替代</li><li>处理小额支付时，使用较小的单位进行运算</li></ol><h2 id="_13-面向对象的三大特征" tabindex="-1"><a class="header-anchor" href="#_13-面向对象的三大特征"><span>13. 面向对象的三大特征</span></a></h2><p>封装：将数据和操作数据的方法捆绑在一起，形成独立的对象。</p><ul><li>好处:提高安全性、隐藏实现细节</li></ul><p>继承：子类可以继承父类的属性和方法</p><ul><li>好处：代码复用、减少重复。</li></ul><p>多态：不同类的对象对同一操作有不同的表现形式</p><ul><li>提高代码扩展性和灵活性。</li></ul><h2 id="_14-多态解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_14-多态解决了什么问题"><span>14. 多态解决了什么问题？</span></a></h2><ul><li>统一接口，调用方便</li><li>减少代码重复，提高代码复用</li><li>支持开闭原则(对外扩展开放，对内修改关闭)</li><li>代码解耦</li></ul><h2 id="_15-重载和重写的区别" tabindex="-1"><a class="header-anchor" href="#_15-重载和重写的区别"><span>15. 重载和重写的区别</span></a></h2><table><thead><tr><th></th><th>重载</th><th>重写</th></tr></thead><tbody><tr><td>参数列表</td><td>必须不同</td><td>必须相同</td></tr><tr><td>返回类型</td><td>可以不同</td><td>必须相同</td></tr><tr><td>修饰符</td><td>可以不同</td><td>大于或等于原来的修饰符</td></tr><tr><td>抛出异常</td><td>没有限制</td><td>父类声明异常的相同或子类</td></tr></tbody></table><h2 id="_16-访问修饰符" tabindex="-1"><a class="header-anchor" href="#_16-访问修饰符"><span>16. 访问修饰符</span></a></h2><table><thead><tr><th></th><th>private</th><th>default</th><th>protect</th><th>public</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr><td>子类中</td><td></td><td></td><td>√</td><td>√</td></tr><tr><td>全部类</td><td></td><td></td><td></td><td>√</td></tr></tbody></table><h2 id="_17-this关键字的作用" tabindex="-1"><a class="header-anchor" href="#_17-this关键字的作用"><span>17. this关键字的作用</span></a></h2><p>代指当前对象</p><h2 id="_18-抽象类和接口的区别" tabindex="-1"><a class="header-anchor" href="#_18-抽象类和接口的区别"><span>18. 抽象类和接口的区别</span></a></h2><table><thead><tr><th>对比点</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>关键字</td><td><code>abstract class</code></td><td><code>interface</code></td></tr><tr><td>成员变量</td><td>可以有普通成员变量</td><td>只能有常量（<code>public static final</code>）</td></tr><tr><td>方法</td><td>可以有抽象方法和普通方法</td><td>JDK 1.8 前：只有抽象方法；1.8+ 可有 <code>default</code>、<code>static</code> 方法</td></tr><tr><td>构造方法</td><td>✅ 可以有</td><td>❌ 不能有</td></tr><tr><td>继承/实现</td><td>只能单继承</td><td>可以多实现</td></tr><tr><td>使用场景</td><td>抽象出类的 <strong>共性</strong></td><td>定义行为 <strong>规范/能力</strong></td></tr></tbody></table><h2 id="_19-成员变量和局部变量的区别" tabindex="-1"><a class="header-anchor" href="#_19-成员变量和局部变量的区别"><span>19. 成员变量和局部变量的区别</span></a></h2><ul><li>语法形式上</li></ul><p>成员变量可以被访问控制修饰符修饰，局部变量不能</p><p>成员变量没有赋值会自动以默认值赋值，局部变量没有</p><ul><li>创建时机</li></ul><p>成员变量：随类创建而创建</p><p>局部变量：随方法的调用而消失</p><ul><li>存储方面：</li></ul><p>成员变量和对象一起存储在堆内存中</p><p>局部变量如果是基本数据类型存储在栈中，如果是引用数据类型存放指向堆内存的引用</p><h2 id="_20-static关键字" tabindex="-1"><a class="header-anchor" href="#_20-static关键字"><span>20. static关键字</span></a></h2><table><thead><tr><th>修饰对象</th><th>作用</th></tr></thead><tbody><tr><td>变量</td><td>静态变量，所有实例共享</td></tr><tr><td>方法</td><td>静态方法，类级别，与实例无关</td></tr><tr><td>代码块</td><td>类加载的时候会先加载代码块</td></tr></tbody></table><h2 id="_21-final关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#_21-final关键字有什么作用"><span>21. final关键字有什么作用</span></a></h2><table><thead><tr><th>用法</th><th>作用</th></tr></thead><tbody><tr><td>final 变量</td><td>值不可改变</td></tr><tr><td>final 方法</td><td>方法不可被重写</td></tr><tr><td>final 类</td><td>类不可被继承</td></tr><tr><td>final 参数</td><td>方法内不可修改参数值</td></tr></tbody></table><h2 id="_22-final、finally、finalize-的区别" tabindex="-1"><a class="header-anchor" href="#_22-final、finally、finalize-的区别"><span>22. final、finally、finalize 的区别？</span></a></h2><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final"><span>final</span></a></h3><ul><li><strong>类型</strong>：关键字/修饰符</li><li><strong>作用</strong>：用于声明常量、防止继承、防止方法重写</li><li><strong>使用位置</strong>：可以修饰类、方法、变量</li><li><strong>示例</strong>：<code>final int MAX = 100;</code></li></ul><h3 id="finally" tabindex="-1"><a class="header-anchor" href="#finally"><span>finally</span></a></h3><ul><li><strong>类型</strong>：异常处理关键字</li><li><strong>作用</strong>：用于异常处理中，finally 块中的代码无论是否发生异常都会执行</li><li><strong>使用位置</strong>：配合 try-catch 使用</li><li>特点: <ul><li>通常用于释放资源（关闭文件、数据库连接等）</li><li>即使 try 或 catch 中有 return 语句，finally 也会执行</li><li>如果 finally 中有 return，会覆盖 try/catch 中的 return</li></ul></li><li><strong>示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 可能抛出异常的代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 异常处理</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 无论如何都会执行的代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="finalize" tabindex="-1"><a class="header-anchor" href="#finalize"><span>finalize</span></a></h3><ul><li><strong>类型</strong>：Object 类的方法</li><li><strong>作用</strong>：对象被垃圾回收器回收之前调用的方法</li><li><strong>使用位置</strong>：可以在类中重写此方法</li><li>特点: <ul><li>不推荐使用（Java 9 已标记为 @Deprecated）</li><li>执行时机不确定，可能永远不会被调用</li><li>可能影响性能</li><li>建议使用 try-with-resources 或显式的 close() 方法代替</li></ul></li><li><strong>示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> finalize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws Throwable {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 清理资源的代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">finalize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong>：final 用于声明不可变，finally 用于异常处理保证代码执行，finalize 用于垃圾回收（已过时）。</p><h2 id="_23-和equals-的区别" tabindex="-1"><a class="header-anchor" href="#_23-和equals-的区别"><span>23. == 和equals()的区别</span></a></h2><ul><li><code>==</code>比较的如果是基本数据类型，比较的就是值。如果是引用数据类型，比较的就是引用是否相同</li><li><code>equals()</code>一般与<code>==</code>相同都是比较引用是否相同，但是equals()方法一般会被重写，来比较内容是否相同</li></ul><h2 id="_24-为什么重写equals-也要重写hashcode-方法" tabindex="-1"><a class="header-anchor" href="#_24-为什么重写equals-也要重写hashcode-方法"><span>24. 为什么重写equals()也要重写hashCode()方法</span></a></h2><p>重写equals()方法而不重写hashCode()方法可能会导致两个相同的对象会有不同的哈希码，导致HashMap不能正确处理这两个对象</p><h3 id="什么是hashcode-方法" tabindex="-1"><a class="header-anchor" href="#什么是hashcode-方法"><span>什么是hashCode()方法</span></a></h3><p>hashCode 方法主要用来获取对象的哈希码(哈希码是由对象的内存地址或者对象的属性计算出来的，它是⼀个 int 类型的整数，通常是不会重复的，因此可以用来作为键值对的建，以提高查询效率。)</p><h3 id="为什么两个对象有相同的哈希值但不是同一个对象" tabindex="-1"><a class="header-anchor" href="#为什么两个对象有相同的哈希值但不是同一个对象"><span>为什么两个对象有相同的哈希值但不是同一个对象？</span></a></h3><p>由于哈希函数将一个较大的输入域映射到一个较小的输出域，不同的输入值（即不同的对象）可能会产生相同的输出值即哈希冲突</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><strong>只重写</strong> <strong><code>equals</code></strong> <strong>不重写</strong> <strong><code>hashCode</code></strong>：逻辑相等的对象会进到不同桶，<code>HashMap</code> 会认为它们是不同的 key。</p><p><strong>只重写</strong> <strong><code>hashCode</code></strong> <strong>不重写</strong> <strong><code>equals</code></strong>：不同对象可能哈希值相同，但 <code>equals</code> 不相等，导致逻辑错误，比如取不出值。</p><h2 id="_25-java是值传递还是引用传递" tabindex="-1"><a class="header-anchor" href="#_25-java是值传递还是引用传递"><span>25. Java是值传递还是引用传递</span></a></h2><p>Java是值传递，对象作为参数传给方法时，传递的值是对象的引用。引用的值是对象在堆中的地址</p><h3 id="引用对象的特点" tabindex="-1"><a class="header-anchor" href="#引用对象的特点"><span>引用对象的特点</span></a></h3><p>引用对象存储的是对象的地址而不是对象本身。因此引用类型在值传递时传递的是对象的地址</p><h2 id="_26-说说深拷贝和浅拷贝的区别" tabindex="-1"><a class="header-anchor" href="#_26-说说深拷贝和浅拷贝的区别"><span>26. 说说深拷贝和浅拷贝的区别</span></a></h2><ul><li>浅拷贝：创建一个新的对象，这个对象的属性和原对象的属性完全相同，如果属性是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是引用地址，新旧对象共享同一个引用对象。拷贝方法：实现Cloneable接口并重写clone方法</li><li>深拷贝：创建一个对象，递归复制所有的对象引用，新对象和原对象完全独立，两个对象的修改不会相互影响。拷贝方法:手动拷贝、序列化</li></ul><h2 id="_27-java创建对象的方式有哪几种" tabindex="-1"><a class="header-anchor" href="#_27-java创建对象的方式有哪几种"><span>27. Java创建对象的方式有哪几种？</span></a></h2><ul><li>new关键字</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>通过反射</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Person&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Person)</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Clone</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Person)</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>序列化和反序列化</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ObjectOutputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> objectOutputStream </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ObjectOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;person.text&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">objectOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">writeObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">objectOutputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ObjectInputStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> objectInputStream </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ObjectInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;person.text&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">))</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Person)</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">objectInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">readObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">objectInputStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_28-string是java的基本数据类型吗-可以被继承吗" tabindex="-1"><a class="header-anchor" href="#_28-string是java的基本数据类型吗-可以被继承吗"><span>28. String是Java的基本数据类型吗？可以被继承吗？</span></a></h2><p>不是基本数据类型，不能被继承，String类被final修饰</p><h2 id="_29-string和stringbuilder、stringbuffer的区别" tabindex="-1"><a class="header-anchor" href="#_29-string和stringbuilder、stringbuffer的区别"><span>29. String和StringBuilder、StringBuffer的区别</span></a></h2><ul><li>String的字符串内容是不可变的，对字符串的操作都是创建一个新的String对象</li><li>StringBuilder提供了对字符串增删改查操作的方法，可以在原有字符串上修改，不创建新的对象</li><li>StringBuffer在StringBuilder基础上加上synchronized</li></ul><h2 id="_30-string-str1-new-string-abc-和-string-str2-abc-的区别" tabindex="-1"><a class="header-anchor" href="#_30-string-str1-new-string-abc-和-string-str2-abc-的区别"><span>30. String str1 = new String(&quot;abc&quot;) 和 String str2 = &quot;abc&quot; 的区别？</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li>会先查看常量池中是否有&quot;abc&quot;如果没有就会先在常量池中创建&quot;abc&quot;，如果有直接引用</li><li>在堆内存创建新的String对象,并将其初始化为String常量池中&quot;abc&quot;的副本,指向的是堆中的对象</li><li>该方法会分别在常量池和堆中创建对象</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;abc&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>直接引用常量池中的&quot;abc&quot;，指向的是常量池中的对象</p><h2 id="_31-string-是不可变类吗-字符串拼接是如何实现的" tabindex="-1"><a class="header-anchor" href="#_31-string-是不可变类吗-字符串拼接是如何实现的"><span>31. String 是不可变类吗？字符串拼接是如何实现的？</span></a></h2><p>是不可变的，String没有对字符串内容修改的公开方法且String被final修饰不能通过子类实现方法去修改字符串内容。String底层实现是被final修饰的数组</p><h3 id="字符串拼接怎么实现的" tabindex="-1"><a class="header-anchor" href="#字符串拼接怎么实现的"><span>字符串拼接怎么实现的</span></a></h3><h3 id="编译期常量拼接" tabindex="-1"><a class="header-anchor" href="#编译期常量拼接"><span>编译期常量拼接</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在编译阶段</strong>，<code>&quot;Hello&quot; + &quot;World&quot;</code> 会被优化成 <code>&quot;HelloWorld&quot;</code>，直接存放在字符串常量池。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行时会将a+b转换成<code>String c = new StringBuilder().append(a).append(b).toString();</code></p><h3 id="为什么什么设计成不可变的" tabindex="-1"><a class="header-anchor" href="#为什么什么设计成不可变的"><span>为什么什么设计成不可变的？</span></a></h3><ul><li>安全性：字符串常用于类加载、网络地址、文件路径，保持不可变更安全。</li><li>线程安全：多个线程共享同一个字符串对象不会有并发问题。</li><li>哈希缓存:能作为hashmap的键，提高哈希查询效率</li></ul><h2 id="_32-intern-方法有什么作用" tabindex="-1"><a class="header-anchor" href="#_32-intern-方法有什么作用"><span>32. intern 方法有什么作用？</span></a></h2><p>作用：返回字符串对象在字符串常量池中的引用。</p><ul><li>如果常量池中已经有一个与当前字符串内容相同的字符串，<code>intern()</code> 就返回常量池里的那个引用。</li><li>如果常量池中没有，就把当前字符串对象的引用（或副本）加入常量池，然后返回它。</li></ul><h2 id="_33-integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" tabindex="-1"><a class="header-anchor" href="#_33-integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗"><span>33. Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；相等吗?</span></a></h2><p><code>Integer a = 127等于Integer b = 127</code>，Java自动装箱过程中，会使用<code>Integer.valueOf()</code>方法来创建Integer对象，<code>Integer.valueOf()</code>会缓存-128~127的对象，因此a,b在常量池中有相同的<code>Integer</code>对象</p><p><code>Integer c= 128，Integer d = 128</code>,不相同</p><h2 id="_34-string-怎么转成-integer-的-原理" tabindex="-1"><a class="header-anchor" href="#_34-string-怎么转成-integer-的-原理"><span>34. String 怎么转成 Integer 的？原理？</span></a></h2><p>两种实现：使用<code>Integer.parseInt(s);</code>或者<code>Integer.valueOf(s);</code>底层都是使用<code>Integer.parseInt(s);</code></p><p>源码使用的是<code>result * radix - digit</code>因为Integer.MIN_VALUE绝对值比Integer.MAX_VALUE多1，能够避免溢出</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//radix是进制</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> parseInt</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> radix)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            throws </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NumberFormatException</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * WARNING: This method may be invoked early during VM initialization</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * before IntegerCache is initialized. Care must be taken to not use</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * the valueOf method.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (radix </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Character</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MIN_RADIX</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;radix &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> radix </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                                        &quot; less than Character.MIN_RADIX&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (radix </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Character</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_RADIX</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;radix &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> radix </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                                        &quot; greater than Character.MAX_RADIX&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> negative </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> len </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> limit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> multmin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> digit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (len </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> firstChar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (firstChar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Possible leading &quot;+&quot; or &quot;-&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (firstChar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;-&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                negative </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                limit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MIN_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (firstChar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;+&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forInputString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (len </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Cannot have lone &quot;+&quot; or &quot;-&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forInputString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        multmin </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> limit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> radix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> len) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // Accumulating negatively avoids surprises near MAX_VALUE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            digit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Character</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">digit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">charAt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i++),radix);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (digit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forInputString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> multmin) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forInputString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> radix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> limit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> digit) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                throw</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forInputString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> digit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormatException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forInputString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> negative </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new-integer-10-new-integer-10-相等吗" tabindex="-1"><a class="header-anchor" href="#new-integer-10-new-integer-10-相等吗"><span>new Integer(10) == new Integer(10) 相等吗</span></a></h3><p>不相同，new关键字会在堆上创建不同的Integer对象，==比较两个对象的引用不相同</p><h2 id="_35-object类" tabindex="-1"><a class="header-anchor" href="#_35-object类"><span>35. Object类</span></a></h2><ul><li>TODO</li></ul><h2 id="_36-异常处理体系" tabindex="-1"><a class="header-anchor" href="#_36-异常处理体系"><span>36. 异常处理体系</span></a></h2><p>暂时无法在飞书文档外展示此内容</p><ul><li>Error是较为严重的错误，一般不能通过程序去修复</li><li>Exception是可以被程序处理的异常，分为编译时异常(Checked Exception)和运行时异常(Runtime Exception)</li><li>编译时异常需要显示处理，运行时异常没有要求必修处理他们</li></ul><h2 id="_37-异常处理的方法" tabindex="-1"><a class="header-anchor" href="#_37-异常处理的方法"><span>37. 异常处理的方法</span></a></h2><ul><li>通过throw、throws关键字将异常抛出，交给上层调用者处理</li><li>通过try-catch方法捕获、处理异常</li></ul><h3 id="cath和finally的异常可以同时抛出吗" tabindex="-1"><a class="header-anchor" href="#cath和finally的异常可以同时抛出吗"><span>cath和finally的异常可以同时抛出吗？</span></a></h3><p>不会同时抛出，finally的异常会将cath的异常覆盖掉，并向上抛出</p><h2 id="_38-三道经典异常处理题" tabindex="-1"><a class="header-anchor" href="#_38-三道经典异常处理题"><span>38. 三道经典异常处理题</span></a></h2><h3 id="题目一-输出结果是什么" tabindex="-1"><a class="header-anchor" href="#题目一-输出结果是什么"><span>题目一：输出结果是什么</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TryDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后的输出结果是：31</p><p>finally一定会执行，所以在方法结束之前会输出3，方法结束后会</p><h3 id="题目二-输出结果是什么" tabindex="-1"><a class="header-anchor" href="#题目二-输出结果是什么"><span>题目二：输出结果是什么</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TryDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出是3</p><h3 id="题目三-输出结果是什么" tabindex="-1"><a class="header-anchor" href="#题目三-输出结果是什么"><span>题目三：输出结果是什么</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TryDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出是2</p><h2 id="_39-java中io分为几类" tabindex="-1"><a class="header-anchor" href="#_39-java中io分为几类"><span>39. Java中IO分为几类</span></a></h2><ul><li>按照数据流方向可以分为：输入流和输出流</li><li>按照处理的单位可以分为：字节流和字符流</li><li>按功能分：节点流，处理流，管道流</li></ul><h3 id="java缓冲区溢出-如何预防" tabindex="-1"><a class="header-anchor" href="#java缓冲区溢出-如何预防"><span>Java缓冲区溢出，如何预防</span></a></h3><ul><li>合理设置缓冲区大小</li><li>控制写入数据量</li></ul><h2 id="_40-有字节流为什么还要字符流" tabindex="-1"><a class="header-anchor" href="#_40-有字节流为什么还要字符流"><span>40. 有字节流为什么还要字符流？</span></a></h2><p>字符流可以通过字节流转化而来，但这个过程很耗时，所以直接提供了可以操作字符的接口。字符流方便处理文本文档，字节流处理音频和视频</p><h2 id="_41-bio、nio、aio之间的区别" tabindex="-1"><a class="header-anchor" href="#_41-bio、nio、aio之间的区别"><span>41. BIO、NIO、AIO之间的区别</span></a></h2><ul><li>BIO：同步阻塞I/O，每个请求都需要一个线程来处理，线程会阻塞在 I/O 操作（如 <code>read()</code>、<code>accept()</code>）上，直到数据就绪。</li><li>NIO：同步非阻塞I/O模型，基于 <code>Channel</code>、<code>Buffer</code> 和 <code>Selector</code>，线程不会阻塞在 I/O 操作上，而是通过 <strong>Selector</strong> 轮询哪些通道就绪</li><li>AIO：异步I/O，发起I/O操作请求之后不用等待，I/O操作完成后会回调通知应用</li></ul><h2 id="_42-什么是序列化、反序列化" tabindex="-1"><a class="header-anchor" href="#_42-什么是序列化、反序列化"><span>42. 什么是序列化、反序列化</span></a></h2><p>序列化就是将对象转换为字节流的过程</p><p>反序列化就是将字节流转换成对象的过程</p><h3 id="serializable接口有什么用" tabindex="-1"><a class="header-anchor" href="#serializable接口有什么用"><span>Serializable接口有什么用</span></a></h3><p>用来标识一个类可以被序列化</p>`,165)])])}const d=s(h,[["render",e]]),g=JSON.parse('{"path":"/posts/%E6%9D%82%E8%B0%88/JavaSE%E5%85%AB%E8%82%A1.html","title":"Java基础八股","lang":"zh-CN","frontmatter":{"title":"Java基础八股","categories":["杂谈"],"tags":["JavaSE八股"],"star":true,"sticky":true,"cover":"https://akainews.oss-cn-beijing.aliyuncs.com/images/top-1.gif","description":"1. Java语言有哪些特性 跨平台性、面向对象、平台无关性 2. JVM、JDK、JRE有什么区别 JVM(Java虚拟机)：是实现跨平台的关键 JDK(Java开发工具包)：一整套完整的JavaJDK JRE(Java运行环境)：包括Java运行需要的库以及JVM img.pngimg.png 3. 说说什么是跨平台，原理是什么 Java一次编译到...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础八股\\",\\"image\\":[\\"https://akainews.oss-cn-beijing.aliyuncs.com/images/top-1.gif\\"],\\"dateModified\\":\\"2025-10-03T13:07:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Recursion\\",\\"url\\":\\"https://github.com/scrazyakai?tab=repositories\\"}]}"],["meta",{"property":"og:url","content":"https://scrazyakai.github.io/blog/posts/%E6%9D%82%E8%B0%88/JavaSE%E5%85%AB%E8%82%A1.html"}],["meta",{"property":"og:site_name","content":"青云小筑"}],["meta",{"property":"og:title","content":"Java基础八股"}],["meta",{"property":"og:description","content":"1. Java语言有哪些特性 跨平台性、面向对象、平台无关性 2. JVM、JDK、JRE有什么区别 JVM(Java虚拟机)：是实现跨平台的关键 JDK(Java开发工具包)：一整套完整的JavaJDK JRE(Java运行环境)：包括Java运行需要的库以及JVM img.pngimg.png 3. 说说什么是跨平台，原理是什么 Java一次编译到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://akainews.oss-cn-beijing.aliyuncs.com/images/top-1.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-03T13:07:10.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://akainews.oss-cn-beijing.aliyuncs.com/images/top-1.gif"}],["meta",{"name":"twitter:image:alt","content":"Java基础八股"}],["meta",{"property":"article:tag","content":"JavaSE八股"}],["meta",{"property":"article:modified_time","content":"2025-10-03T13:07:10.000Z"}]]},"git":{"createdTime":1759415060000,"updatedTime":1759496830000,"contributors":[{"name":"scrazyakai","username":"scrazyakai","email":"2145303367@qq.com","commits":11,"url":"https://github.com/scrazyakai"}]},"readingTime":{"minutes":13.42,"words":4025},"filePathRelative":"posts/杂谈/JavaSE八股.md","excerpt":"<h2>1. Java语言有哪些特性</h2>\\n<p>跨平台性、面向对象、平台无关性</p>\\n<h2>2. JVM、JDK、JRE有什么区别</h2>\\n<p>JVM(Java虚拟机)：是实现跨平台的关键</p>\\n<p>JDK(Java开发工具包)：一整套完整的JavaJDK</p>\\n<p>JRE(Java运行环境)：包括Java运行需要的库以及JVM</p>\\n<figure><figcaption>img.png</figcaption></figure>\\n<h2>3. 说说什么是跨平台，原理是什么</h2>\\n<p>Java一次编译到处运行,原理是加入了一个中间件——JVM，JVM中.calss文件被翻译成各个系统的机器码</p>","autoDesc":true}');export{d as comp,g as data};
