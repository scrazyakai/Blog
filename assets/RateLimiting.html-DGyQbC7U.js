import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as a,o as e}from"./app-BbrLET5X.js";const t={};function l(p,s){return e(),n("div",null,[...s[0]||(s[0]=[a(`<h1 id="限流" tabindex="-1"><a class="header-anchor" href="#限流"><span>限流</span></a></h1><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><table><thead><tr><th>场景</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><strong>接口防刷</strong></td><td>限制单个用户或IP访问频率</td><td>登录接口、短信验证码接口</td></tr><tr><td><strong>秒杀系统</strong></td><td>控制并发请求数，保护库存与数据库</td><td>“双11”秒杀抢购接口</td></tr><tr><td><strong>网关层限流</strong></td><td>控制整体流量、防止突发流量打垮后端</td><td>Nginx、Spring Cloud Gateway、Zuul</td></tr><tr><td><strong>服务间调用限流</strong></td><td>控制下游依赖的访问频率</td><td>微服务调用：A → B，每秒最多 100 次</td></tr><tr><td><strong>MQ消费者限速</strong></td><td>控制消费速率，避免下游处理不过来</td><td>消费 Kafka/RabbitMQ 数据</td></tr><tr><td><strong>分布式系统全局限流</strong></td><td>统一限制整个系统的请求速率</td><td>Redis + Lua 实现全局限流</td></tr></tbody></table><h2 id="漏桶算法" tabindex="-1"><a class="header-anchor" href="#漏桶算法"><span>漏桶算法</span></a></h2><ul><li><p>请求先进入桶中；</p></li><li><p>桶以<strong>固定速率</strong>漏水（处理请求）；</p></li><li><p>当桶满时，新请求直接丢弃。</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>    请求流入</span></span>
<span class="line"><span>   ↓↓↓↓↓↓↓↓↓↓↓</span></span>
<span class="line"><span>  ┌────────────┐</span></span>
<span class="line"><span>  │   漏桶      │  ——→ 按固定速率流出</span></span>
<span class="line"><span>  │   (容量N)   │</span></span>
<span class="line"><span>  └────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法"><span>令牌桶算法</span></a></h2><p>令牌桶中定期生成令牌：</p><ul><li>每个请求必须拿到令牌才能执行；</li><li>桶最多能装 <code>capacity</code> 个令牌；</li><li>没有令牌的请求要么等待，要么丢弃。</li></ul><h2 id="redisson的redissonratelimiter" tabindex="-1"><a class="header-anchor" href="#redisson的redissonratelimiter"><span>Redisson的RedissonRateLimiter</span></a></h2><p>Redisson 的限流器实现了一个 <strong>令牌桶算法 (Token Bucket)</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>      令牌按速率生成 → 桶容量上限 → 请求消耗令牌</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性：</span></a></h3><ul><li><p>每秒生成固定数量令牌；</p></li><li><p>当桶满时，新令牌丢弃；</p></li><li><p>请求只有拿到令牌才能执行；</p></li><li><p>没有令牌 → 立即拒绝 或 等待一段时间。</p></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><h4 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;3.27.2&lt;/version&gt; &lt;!-- 使用最新版 --&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-redis-application-yml" tabindex="-1"><a class="header-anchor" href="#配置-redis-application-yml"><span>配置 Redis（application.yml）</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>spring:</span></span>
<span class="line"><span>  redis:</span></span>
<span class="line"><span>    host: localhost</span></span>
<span class="line"><span>    port: 6379</span></span>
<span class="line"><span>    password: 123456</span></span>
<span class="line"><span>redisson:</span></span>
<span class="line"><span>  config: |</span></span>
<span class="line"><span>    singleServerConfig:</span></span>
<span class="line"><span>      address: &quot;redis://127.0.0.1:6379&quot;</span></span>
<span class="line"><span>      password: 123456</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注入-redissonclient" tabindex="-1"><a class="header-anchor" href="#注入-redissonclient"><span>注入 RedissonClient</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>import org.redisson.api.RedissonClient;</span></span>
<span class="line"><span>import org.redisson.api.RRateLimiter;</span></span>
<span class="line"><span>import org.redisson.api.RateType;</span></span>
<span class="line"><span>import org.redisson.api.RateIntervalUnit;</span></span>
<span class="line"><span>import org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span>import org.springframework.stereotype.Component;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>public class RedisRateLimiter {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private RedissonClient redissonClient;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public boolean tryAcquire(String key) {</span></span>
<span class="line"><span>        RRateLimiter rateLimiter = redissonClient.getRateLimiter(&quot;limit:&quot; + key);</span></span>
<span class="line"><span>        // 初始化（只在首次执行时生效）</span></span>
<span class="line"><span>        rateLimiter.trySetRate(</span></span>
<span class="line"><span>                RateType.OVERALL,   // 全局限流（也可选择 PER_CLIENT）</span></span>
<span class="line"><span>                5,                  // 每秒最多5个请求</span></span>
<span class="line"><span>                1,                  // 时间间隔1秒</span></span>
<span class="line"><span>                RateIntervalUnit.SECONDS</span></span>
<span class="line"><span>        );</span></span>
<span class="line"><span>        return rateLimiter.tryAcquire(1); // 获取1个令牌</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现限流接口" tabindex="-1"><a class="header-anchor" href="#实现限流接口"><span>实现限流接口</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">METHOD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> RateLimit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> permitsPerSecond</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AOP实现</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.aspectj.lang.ProceedingJoinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.aspectj.lang.annotation.Around</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.aspectj.lang.annotation.Aspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.beans.factory.annotation.Autowired</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.stereotype.Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Aspect</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RateLimitAspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RedisRateLimiter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> limiter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Around</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@annotation(rateLimit)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> around</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ProceedingJoinPoint</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> joinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RateLimit</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> rateLimit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Throwable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rateLimit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rateLimit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitsPerSecond</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">limiter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tryAcquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;请求太频繁，请稍后再试！&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> joinPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">proceed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>@GetMapping(&quot;/create&quot;)</span></span>
<span class="line"><span>@RateLimit(key = &quot;createOrder&quot;, permitsPerSecond = 5)</span></span>
<span class="line"><span>public String createOrder() {</span></span>
<span class="line"><span>    return &quot;下单成功！&quot;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)])])}const h=i(t,[["render",l]]),k=JSON.parse('{"path":"/posts/%E6%9D%82%E8%B0%88/RateLimiting.html","title":"限流","lang":"zh-CN","frontmatter":{"title":"限流","icon":"pen-to-square","categories":["杂谈"],"tags":["限流"],"description":"限流 使用场景 漏桶算法 请求先进入桶中； 桶以固定速率漏水（处理请求）； 当桶满时，新请求直接丢弃。 令牌桶算法 令牌桶中定期生成令牌： 每个请求必须拿到令牌才能执行； 桶最多能装 capacity 个令牌； 没有令牌的请求要么等待，要么丢弃。 Redisson的RedissonRateLimiter Redisson 的限流器实现了一个 令牌桶算法...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"限流\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-18T15:49:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Recursion\\",\\"url\\":\\"https://github.com/scrazyakai?tab=repositories\\"}]}"],["meta",{"property":"og:url","content":"https://scrazyakai.github.io/blog/posts/%E6%9D%82%E8%B0%88/RateLimiting.html"}],["meta",{"property":"og:site_name","content":"青云小筑"}],["meta",{"property":"og:title","content":"限流"}],["meta",{"property":"og:description","content":"限流 使用场景 漏桶算法 请求先进入桶中； 桶以固定速率漏水（处理请求）； 当桶满时，新请求直接丢弃。 令牌桶算法 令牌桶中定期生成令牌： 每个请求必须拿到令牌才能执行； 桶最多能装 capacity 个令牌； 没有令牌的请求要么等待，要么丢弃。 Redisson的RedissonRateLimiter Redisson 的限流器实现了一个 令牌桶算法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T15:49:13.000Z"}],["meta",{"property":"article:tag","content":"限流"}],["meta",{"property":"article:modified_time","content":"2025-10-18T15:49:13.000Z"}]]},"git":{"createdTime":1760802231000,"updatedTime":1760802553000,"contributors":[{"name":"scrazyakai","username":"scrazyakai","email":"2145303367@qq.com","commits":2,"url":"https://github.com/scrazyakai"}]},"readingTime":{"minutes":2.03,"words":608},"filePathRelative":"posts/杂谈/RateLimiting.md","excerpt":"\\n<h2>使用场景</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>场景</th>\\n<th>说明</th>\\n<th>示例</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>接口防刷</strong></td>\\n<td>限制单个用户或IP访问频率</td>\\n<td>登录接口、短信验证码接口</td>\\n</tr>\\n<tr>\\n<td><strong>秒杀系统</strong></td>\\n<td>控制并发请求数，保护库存与数据库</td>\\n<td>“双11”秒杀抢购接口</td>\\n</tr>\\n<tr>\\n<td><strong>网关层限流</strong></td>\\n<td>控制整体流量、防止突发流量打垮后端</td>\\n<td>Nginx、Spring Cloud Gateway、Zuul</td>\\n</tr>\\n<tr>\\n<td><strong>服务间调用限流</strong></td>\\n<td>控制下游依赖的访问频率</td>\\n<td>微服务调用：A → B，每秒最多 100 次</td>\\n</tr>\\n<tr>\\n<td><strong>MQ消费者限速</strong></td>\\n<td>控制消费速率，避免下游处理不过来</td>\\n<td>消费 Kafka/RabbitMQ 数据</td>\\n</tr>\\n<tr>\\n<td><strong>分布式系统全局限流</strong></td>\\n<td>统一限制整个系统的请求速率</td>\\n<td>Redis + Lua 实现全局限流</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{h as comp,k as data};
